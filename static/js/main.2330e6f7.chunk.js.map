{"version":3,"sources":["components/Header.js","components/Flights.js","components/FlightInfo.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","title","Flights","carriers","flights","currencies","places","quotes","placeMap","Map","i","length","set","PlaceId","CityName","IataCode","carriersMap","CarrierId","Name","map","f","get","OutboundLeg","OriginId","DestinationId","DepartureDate","substring","CarrierIds","Symbol","MinPrice","QuoteId","FlightInfo","useState","setFlights","dep","setQueryDep","dest","setQueryDest","depDate","setQueryDepDate","destDate","setQueryDestDate","currencyIn","setQueryCurrency","showFlights","setShowFlights","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","onSubmit","b","a","reqOptions","method","headers","process","reqString","URLSearchParams","inboundpartialdate","fetch","response","json","preventDefault","fetchMyAPI","id","placeholder","value","onChange","target","required","type","name","min","c","d","e","defaultValue","rel","href","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2330e6f7.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nfunction Header(props) { \n    return(\n        <div className=\"header\">\n            {props.title}\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './Flights.css';\n\nfunction Flights (props) { \n    //Split the object into its different sections\n    const carriers = props.flights['Carriers'];\n    const currencies = props.flights['Currencies'];\n    const places = props.flights['Places'];\n    const quotes = props.flights['Quotes'];\n\n    //Don't try to access data if it's empty/undefined\n    if (!places || !carriers || !currencies || !quotes) {\n        return null;\n    }  \n\n    //Map the airports and the IATA code with their id for easy lookup later on\n    var placeMap = new Map();\n    for (var i = 0; i < places.length; ++i) {\n        placeMap.set(places[i].PlaceId, places[i].CityName + \" (\" + places[i].IataCode + \")\");\n    }\n\n    //Map the carriers with their id for easy lookup later on\n    var carriersMap = new Map();\n    for (i = 0; i < carriers.length; ++i) {\n        carriersMap.set(carriers[i].CarrierId, carriers[i].Name);\n    }\n\n    //If there is no data, make a single row table saying \"No Result\"\n    if (quotes.length === 0) {\n        return (\n            <div className=\"flights\">\n                <table className=\"flightTable\">\n                    <thead>\n                        <tr> <th>No Result</th> </tr>\n                    </thead>\n                </table>\n            </div>\n        )\n    }\n\n    //Make sure the data is in the proper spot\n    /*console.log(props);\n    console.log(carriers);\n    console.log(currencies);\n    console.log(places);\n    console.log(quotes);*/\n\n    //Use the maps created earlier to get the required data\n    return(\n        <div className=\"flights\">\n            <table className=\"flightTable\">\n                <thead>\n                    <tr>\n                        <th>Start City</th>\n                        <th>End City</th>\n                        <th>Date</th>\n                        <th>Carrier</th>\n                        <th>Price</th>\n                    </tr>\n                </thead>\n\n                <tbody>\n                    {quotes && quotes.map(f => {\n                        return (<tr key={f.QuoteId}>\n                            <td>{placeMap.get(f.OutboundLeg.OriginId)}</td>\n                            <td>{placeMap.get(f.OutboundLeg.DestinationId)}</td>\n                            <td>{f.OutboundLeg.DepartureDate.substring(0,10)}</td>\n                            <td>{carriersMap.get(f.OutboundLeg.CarrierIds[0])}</td>\n                            <td>{currencies[0].Symbol + f.MinPrice}</td>\n                        </tr>)\n                    })}\n                </tbody>\n            </table>\n         </div>\n    )\n}\n\nexport default Flights;","import React, { useState } from 'react';\nimport './FlightInfo.css';\nimport './WebsiteInfo.css';\nimport Flights from './Flights';\n\nfunction FlightInfo() { \n\n    //Create the variables for the different paramenters we need\n    const [flights,setFlights] = useState([])\n    const [dep,setQueryDep] = useState(\"\")\n    const [dest,setQueryDest] = useState(\"\")\n    const [depDate,setQueryDepDate] = useState(\"\")\n    const [destDate,setQueryDestDate] = useState(\"\")\n    const [currencyIn,setQueryCurrency] = useState(\"\")\n    const [showFlights,setShowFlights] = useState(false)\n\n    //Get today's date to use as a minimum for the data inputs\n    var today = new Date();\n    var dd = String(today.getDate()).padStart(2, '0');\n    var mm = String(today.getMonth() + 1).padStart(2, '0');\n    var yyyy = today.getFullYear();\n    today = yyyy + '-' + mm + '-' + dd;\n\n    function handleSubmit(b) {\n        b.preventDefault()\n        async function fetchMyAPI() {\n            const reqOptions = {\n                method: 'GET',\n                headers: {\n                    \"x-rapidapi-key\": `${process.env.REACT_APP_API_KEY}`,\n                    \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\n                    \"useQueryString\": true\n                }\n            }\n\n            //Build the api string with the variables\n            var reqString = \"https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browsequotes/v1.0/US/\" + currencyIn + \"/en-US/\" + dep + \"-sky/\" + dest + \"-sky/\" + depDate + \"/?\" + new URLSearchParams({inboundpartialdate: destDate});\n            let response = await fetch(reqString, reqOptions)\n            response = await response.json()\n            setFlights(response)\n        }\n\n        //Set default values\n        fetchMyAPI()\n        setShowFlights(true)\n        setQueryDep(\"\")\n        setQueryDest(\"\")\n        setQueryDepDate(\"\")\n        setQueryDestDate(\"\")\n        setQueryCurrency(\"\")\n    }\n\n    //Create the different types of input: Text - Airports, Calendar - Date, Select - Currency\n    //Show a small text box about how to use the website for the user\n    return(\n        <div className=\"flightInfo\">\n           <form onSubmit={handleSubmit}>\n                <input id=\"queryInput\" placeholder=\"Departure\" value={dep} onChange={a => setQueryDep(a.target.value)} required/>\n                <input id=\"queryInput\" placeholder=\"Destination\" value={dest} onChange={b => setQueryDest(b.target.value)} required/>\n                <input id=\"dateFormOne\" type=\"month\" name=\"depDate\" min={today} value={depDate} onChange={c => setQueryDepDate(c.target.value)} required />\n                <input id=\"dateFormTwo\" type=\"month\" name=\"destDate\" min={depDate} value={destDate} onChange={d => setQueryDestDate(d.target.value)} required />\n                <select id=\"currency\" placeholder=\"Currency\" name=\"currency\" value={currencyIn} onChange={e => setQueryCurrency(e.target.value)} required>  \n                    <option defaultValue value=\"\"> -- Currency -- </option>\n                    <option value=\"USD\">US Dollar</option>\n                    <option value=\"CAD\">Canadian Dollar</option>\n                    <option value=\"GBP\">British Pound</option>\n                    <option value=\"CNY\">Chinese Yuan</option>\n                    <option value=\"EUR\">Euro</option>\n                    <option value=\"INR\">Indian Rupee</option>\n                    <option value=\"JPY\">Japanese Yen</option>\n                    <option value=\"MXN\">Mexican Peso</option>\n                    <option value=\"RUB\">Russian Ruble</option>\n                </select>\n                \n                <button id=\"submitButton\" className=\"search\">Submit!</button>\n           </form>\n           \n           <div className=\"websiteInfo\">\n                <h3>Welcome to the Skyscanner Flight Checker</h3>\n                <p>Please enter the 3-letter airport codes in the \"Departure\" and \"Destination\" fields along with the desired departure date, return date, and currency. The best price will be indicated with <span>green</span> text.</p>\n                <p>Don't know the airport codes? <a rel=\"noreferrer\" href=\"https://airportcod.es/#\"target=\"_blank\">Click Here</a></p>\n            </div>\n\n            { showFlights ? <Flights flights={flights}></Flights> : <></>}\n        </div>\n    )\n}\n\nexport default FlightInfo;\n","import React from 'react';\nimport './Footer.css';\n\nfunction Footer(props) { \n    return(\n        <div className=\"footer\">\n            {props.title}\n        </div>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport Header from './components/Header';\nimport FlightInfo from './components/FlightInfo';\nimport Footer from './components/Footer';\nimport './App.css';\n\nfunction App() {\n  //Build the different sections of the website\n  return (\n    <div className=\"App\">\n      <Header title=\"Skyscanner Flight Checker\"></Header>\n      <FlightInfo></FlightInfo> \n      <Footer title={'Arjav Patel - 2021\\nMade For: Capital One Summit Challenge'}></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}